# package_installer.py
# author: droidecahedron
# uses python/pip to collect python packages you're missing. 
# You need python installed and within your PATH var on your system.

import sys
import subprocess
import pkg_resources

print('Thank you for using droidecahedron\'s python module installer!')

print('********************************************************************************')
print('********************************************************************************')
print('********************************************************************************')
print('********************************************************************************')
print('************************#&/,%%%%%%\\\\\\\\\\~~~\(@%\\*********************************')
print('********************@/%%%%%%%%%#**** ***********(%%%****************************')
print('*****************@%%%%%%%%%%%%%%(*****************(##*&*************************')
print('********************/&(//&&%%%%********************/###(@***********************')
print('**************************&//(&*********************&####%&###%&****************')
print('******************************%///%&**************%&#%&###@%%%%%****************')
print('*******************&//****(&@@@@@@@@@@&#*******%%%@.*****%@*********************')
print('***********************&@(/////********//////%%@/. .*&@@* @*********************')
print('**************************/&***@/#%&&&&%#*...            @**********************')
print('**************************&#&.*&.&#./             .     @***********************')
print('************************(#*%@,.%&(&.&.,/*#* ##&%**,,,@ @************************')
print('**********************####*(..%%&((((&&&%&%#*&@#,&%*(@&%(***********************')
print('********************((###&**,##@#,,%#%*&&%&%/&&&*/%(**&/(***********************')
print('********************/#####/%&(##@%*(*&,,,*,#((*,@,*#&%%@************************')
print('*********************/#####@/#####@,/##,*,,%/%*,,/((@###&***********************')
print('********************/######&#### ###&@//(**&,,(&#&@######&*******/**************')
print('*********************#%####&#&#############&&&#############&**#%%%*%%%%*********')
print('**********************&######&##%#######################&%&*%%%%&%%%%%&*********')
print('**********************######%%&@&#####################@%%%%@%%&%%%%%%***********')
print('*************************###%%%##@#####################%%%%@%%%%%%%*************')
print('**************************%#######%%#@&#########%##%%%%%%%%&%%%%%***************')
print('**************************&###&#########%###@%##%%#######%%&&*******************')
print('***************************(####%%#########################@********************')
print('***************************######%%@**&@&&%%##%%&@#########(********************')
print('****************************#/&&/********************%@&&@*&********************')
print('****************************(.***************************(.(********************')
print('****************************&,&***************************&.%*******************')
print('                             *.                            &*                   ')
print('                        ,@*.#*..........................(@((.%*&&*.             ')
print('                    ...#&,..........................................            ')
print('                           .........@droidecahedron..........                   ')



# This is basically the list of modules you want to avoid the user having to use pip install <module>
# You CAN Bundle packaging of modules more intelligently into your application, but this gets the job done.
# Refer to this: https://pip.pypa.io/en/latest/user_guide/#using-pip-from-your-program

required = {'serial', 'pyserial'}

# black magic for installing packages
installed = {pkg.key for pkg in pkg_resources.working_set}
missing = required - installed

if missing:
    python = sys.executable
    subprocess.check_call([python, '-m', 'pip', 'install', *missing], stdout=subprocess.DEVNULL)


# feedback to show what modules pip was called for in the exe
print('pip install called for: ', required)

# post-installation feedback on whether it's installed or not installed.
for package in required:
    try:
        dist = pkg_resources.get_distribution(package)
        print('{} ({}) is installed'.format(dist.key, dist.version))
    except pkg_resources.DistributionNotFound:
        print('{} is NOT installed'.format(package))



